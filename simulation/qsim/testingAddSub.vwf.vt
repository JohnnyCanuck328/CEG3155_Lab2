// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/09/2022 09:25:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    eightbitaddsub
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module eightbitaddsub_vlg_sample_tst(
	controller,
	i_Ai,
	i_Bi,
	sampler_tx
);
input  controller;
input [3:0] i_Ai;
input [3:0] i_Bi;
output sampler_tx;

reg sample;
time current_time;
always @(controller or i_Ai or i_Bi)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module eightbitaddsub_vlg_check_tst (
	carryOut,
	o_Sum,
	sampler_rx
);
input  carryOut;
input [3:0] o_Sum;
input sampler_rx;

reg  carryOut_expected;
reg [3:0] o_Sum_expected;

reg  carryOut_prev;
reg [3:0] o_Sum_prev;

reg  carryOut_expected_prev;
reg [3:0] o_Sum_expected_prev;

reg  last_carryOut_exp;
reg [3:0] last_o_Sum_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	carryOut_prev = carryOut;
	o_Sum_prev = o_Sum;
end

// update expected /o prevs

always @(trigger)
begin
	carryOut_expected_prev = carryOut_expected;
	o_Sum_expected_prev = o_Sum_expected;
end


// expected o_Sum[ 3 ]
initial
begin
	o_Sum_expected[3] = 1'bX;
end 
// expected o_Sum[ 2 ]
initial
begin
	o_Sum_expected[2] = 1'bX;
end 
// expected o_Sum[ 1 ]
initial
begin
	o_Sum_expected[1] = 1'bX;
end 
// expected o_Sum[ 0 ]
initial
begin
	o_Sum_expected[0] = 1'bX;
end 

// expected carryOut
initial
begin
	carryOut_expected = 1'bX;
end 
// generate trigger
always @(carryOut_expected or carryOut or o_Sum_expected or o_Sum)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected carryOut = %b | expected o_Sum = %b | ",carryOut_expected_prev,o_Sum_expected_prev);
	$display("| real carryOut = %b | real o_Sum = %b | ",carryOut_prev,o_Sum_prev);
`endif
	if (
		( carryOut_expected_prev !== 1'bx ) && ( carryOut_prev !== carryOut_expected_prev )
		&& ((carryOut_expected_prev !== last_carryOut_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carryOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carryOut_expected_prev);
		$display ("     Real value = %b", carryOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carryOut_exp = carryOut_expected_prev;
	end
	if (
		( o_Sum_expected_prev[0] !== 1'bx ) && ( o_Sum_prev[0] !== o_Sum_expected_prev[0] )
		&& ((o_Sum_expected_prev[0] !== last_o_Sum_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Sum[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Sum_expected_prev);
		$display ("     Real value = %b", o_Sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_Sum_exp[0] = o_Sum_expected_prev[0];
	end
	if (
		( o_Sum_expected_prev[1] !== 1'bx ) && ( o_Sum_prev[1] !== o_Sum_expected_prev[1] )
		&& ((o_Sum_expected_prev[1] !== last_o_Sum_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Sum[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Sum_expected_prev);
		$display ("     Real value = %b", o_Sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_Sum_exp[1] = o_Sum_expected_prev[1];
	end
	if (
		( o_Sum_expected_prev[2] !== 1'bx ) && ( o_Sum_prev[2] !== o_Sum_expected_prev[2] )
		&& ((o_Sum_expected_prev[2] !== last_o_Sum_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Sum[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Sum_expected_prev);
		$display ("     Real value = %b", o_Sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_Sum_exp[2] = o_Sum_expected_prev[2];
	end
	if (
		( o_Sum_expected_prev[3] !== 1'bx ) && ( o_Sum_prev[3] !== o_Sum_expected_prev[3] )
		&& ((o_Sum_expected_prev[3] !== last_o_Sum_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_Sum[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_Sum_expected_prev);
		$display ("     Real value = %b", o_Sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_Sum_exp[3] = o_Sum_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module eightbitaddsub_vlg_vec_tst();
// constants                                           
// general purpose registers
reg controller;
reg [3:0] i_Ai;
reg [3:0] i_Bi;
// wires                                               
wire carryOut;
wire [3:0] o_Sum;

wire sampler;                             

// assign statements (if any)                          
eightbitaddsub i1 (
// port map - connection between master ports and signals/registers   
	.carryOut(carryOut),
	.controller(controller),
	.i_Ai(i_Ai),
	.i_Bi(i_Bi),
	.o_Sum(o_Sum)
);

// controller
initial
begin
	controller = 1'b0;
	controller = #4000 1'b1;
	controller = #6000 1'b0;
end 
// i_Ai[ 3 ]
initial
begin
	i_Ai[3] = 1'b1;
	i_Ai[3] = #10000 1'b0;
end 
// i_Ai[ 2 ]
initial
begin
	i_Ai[2] = 1'b0;
end 
// i_Ai[ 1 ]
initial
begin
	i_Ai[1] = 1'b0;
end 
// i_Ai[ 0 ]
initial
begin
	i_Ai[0] = 1'b0;
end 
// i_Bi[ 3 ]
initial
begin
	i_Bi[3] = 1'b0;
end 
// i_Bi[ 2 ]
initial
begin
	i_Bi[2] = 1'b0;
end 
// i_Bi[ 1 ]
initial
begin
	i_Bi[1] = 1'b0;
end 
// i_Bi[ 0 ]
initial
begin
	i_Bi[0] = 1'b1;
	i_Bi[0] = #10000 1'b0;
end 

eightbitaddsub_vlg_sample_tst tb_sample (
	.controller(controller),
	.i_Ai(i_Ai),
	.i_Bi(i_Bi),
	.sampler_tx(sampler)
);

eightbitaddsub_vlg_check_tst tb_out(
	.carryOut(carryOut),
	.o_Sum(o_Sum),
	.sampler_rx(sampler)
);
endmodule

